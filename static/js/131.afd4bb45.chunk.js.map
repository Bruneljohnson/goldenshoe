{"version":3,"file":"static/js/131.afd4bb45.chunk.js","mappings":"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","sources":["webpack://golden/./src/components/Profile/EditProfile/EditProfile.module.css?35e9","components/Profile/EditProfile/UpdateAccount.js","components/Profile/EditProfile/ChangePasswordForm.js","webpack://golden/./src/components/Profile/OrderList.module.css?06f7","components/Profile/OrderList.js","webpack://golden/./src/components/Profile/Profile.module.css?b512","components/Profile/Profile.js","components/Pages/ProfilePage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"account\":\"EditProfile_account__TdygD\",\"user-view__content\":\"EditProfile_user-view__content__SljdB\",\"form__input\":\"EditProfile_form__input__DVb8y\",\"form__group\":\"EditProfile_form__group__jII+N\",\"form__label\":\"EditProfile_form__label__OetF0\"};","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport useHttp from \"../../../Hooks/use-Http\";\nimport useInput from \"../../../Hooks/use-input\";\nimport Alerts from \"../../Ui/Alerts\";\n\nimport Input from \"../../Ui/Input\";\nimport classes from \"./EditProfile.module.css\";\n\nconst UpdateAccount = () => {\n  const navigate = useNavigate();\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [accountUpdated, setAccountUpdated] = useState(false);\n  const token = useSelector((state) => state.auth.token);\n\n  const { error, sendRequest } = useHttp();\n\n  /* REGEX USED TO VERIFY INPUTTED EMAIL AND USE OF CUSTOM INPUT HOOKS TO CAPTURE DATA */\n  const re =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    inputHandler: nameInputHandler,\n    blurHandler: nameBlurHandler,\n    clear: clearName,\n  } = useInput(\n    (value) => value.toLowerCase().trim() !== `` && value.trim().includes(` `)\n  );\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    inputHandler: emailInputHandler,\n    blurHandler: emailBlurHandler,\n    clear: clearEmail,\n  } = useInput((value) => value.toLowerCase().match(re) !== []);\n\n  /* VERIFY FORM */\n  useEffect(() => {\n    if (enteredEmailIsValid || enteredNameIsValid) {\n      setFormIsValid(true);\n    }\n  }, [enteredEmailIsValid, enteredNameIsValid]);\n\n  /* ERROR HANDLING FOR FETCH REQUEST */\n  useEffect(() => {\n    let errorTimer;\n    if (error) {\n      setHasError(true);\n      errorTimer = setTimeout(() => {\n        setHasError(false);\n      }, 2000);\n    }\n\n    return () => {\n      clearTimeout(errorTimer);\n    };\n  }, [error]);\n\n  /* FETCH PATCH REQUEST TO UPADTE USER DETAILS*/\n  const updateDetailsHandler = (event) => {\n    event.preventDefault();\n\n    if (!formIsValid) return;\n    const data = { email: enteredEmail, name: enteredName };\n\n    const requestConfig = {\n      url: \"https://goldenshoe-api.herokuapp.com/api/v1/users/updateMe\",\n      method: \"PATCH\",\n      body: data,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"content-Type\": \"application/json\",\n      },\n    };\n    const dataGrabber = (data) => {\n      if (data) {\n        setAccountUpdated(true);\n\n        setTimeout(() => {\n          setAccountUpdated(false);\n          navigate(`/`, { replace: true });\n        }, 2000);\n      }\n    };\n\n    sendRequest(requestConfig, dataGrabber);\n\n    clearEmail();\n    clearName();\n  };\n\n  return (\n    <React.Fragment>\n      {accountUpdated && (\n        <Alerts type=\"success\" msg=\"Your Account Has Been Updated!\" />\n      )}\n      {hasError && <Alerts type=\"error\" msg=\"Account update failed\" />}\n\n      <div className={classes.account}>\n        <h2 className=\" ma-bt-md\">Your account settings</h2>\n        <form\n          onSubmit={updateDetailsHandler}\n          className={`${classes.form} ${classes[\"form-user-data\"]}`}\n        >\n          <Input\n            label=\"Name\"\n            id=\"name\"\n            type=\"text\"\n            // user?.name?.toUpperCase()\n            placeholder={\"Brunel Johnson\"}\n            value={enteredName}\n            onBlur={nameBlurHandler}\n            onChange={nameInputHandler}\n          />\n\n          <Input\n            label=\"Email Address\"\n            id=\"email\"\n            className=\"ma-bt-md\"\n            type=\"email\"\n            // user?.email?.toUpperCase()\n            placeholder={\"brunel@mailsac.com\"}\n            value={enteredEmail}\n            onBlur={emailBlurHandler}\n            onChange={emailInputHandler}\n          />\n\n          <div className={`${classes[\"form__group\"]} right`}>\n            <button className=\"custom-button\" type=\"submit\">\n              Save Settings\n            </button>\n          </div>\n        </form>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default UpdateAccount;\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport useHttp from \"../../../Hooks/use-Http\";\nimport useInput from \"../../../Hooks/use-input\";\nimport Alerts from \"../../Ui/Alerts\";\n\nimport Input from \"../../Ui/Input\";\nimport classes from \"./EditProfile.module.css\";\n\nconst ChangePasswordForm = () => {\n  const navigate = useNavigate();\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [accountUpdated, setAccountUpdated] = useState(false);\n  const token = useSelector((state) => state.auth.token);\n\n  const { error, sendRequest } = useHttp();\n\n  /* STORING AND VALIDATING FORM INPUTS USING CUSTOM INPUT HOOK */\n  const {\n    value: enteredCurrentPassword,\n    isValid: enteredCurrentPasswordIsValid,\n    inputHandler: currentPasswordInputHandler,\n    blurHandler: currentPasswordBlurHandler,\n    clear: clearCurrentPassword,\n  } = useInput((value) => value.trim() !== `` && value.trim().length >= 8);\n\n  const {\n    value: enteredNewPassword,\n    isValid: enteredNewPasswordIsValid,\n    inputHandler: newPasswordInputHandler,\n    blurHandler: newPasswordBlurHandler,\n    clear: clearNewPassword,\n  } = useInput((value) => value.trim() !== `` && value.trim().length >= 8);\n\n  const {\n    value: enteredConfirmPassword,\n    isValid: enteredConfirmPasswordIsValid,\n    inputHandler: confirmPasswordInputHandler,\n    blurHandler: confirmPasswordBlurHandler,\n    clear: clearConfirmPassword,\n  } = useInput((value) => value === enteredNewPassword);\n\n  /* VERIFY FORM */\n  useEffect(() => {\n    if (\n      enteredCurrentPasswordIsValid &&\n      enteredNewPasswordIsValid &&\n      enteredConfirmPasswordIsValid\n    ) {\n      setFormIsValid(true);\n    }\n  }, [\n    enteredCurrentPasswordIsValid,\n    enteredNewPasswordIsValid,\n    enteredConfirmPasswordIsValid,\n  ]);\n\n  /* FETCH (PATCH) CALL TO UPDATE USER PASSWORD */\n  const updatePasswordHandler = (event) => {\n    event.preventDefault();\n\n    if (!formIsValid) return;\n\n    const data = {\n      currentPassword: enteredCurrentPassword,\n      password: enteredNewPassword,\n      confirmPassword: enteredConfirmPassword,\n    };\n\n    const requestConfig = {\n      url: \"https://goldenshoe-api.herokuapp.com/api/v1/users/updatePassword\",\n      method: \"PATCH\",\n      body: data,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"content-Type\": \"application/json\",\n      },\n    };\n\n    const dataGrabber = (data) => {\n      if (data) {\n        setAccountUpdated(true);\n        setTimeout(() => {\n          setAccountUpdated(false);\n          navigate(`/`, { replace: true });\n        }, 2000);\n      }\n    };\n\n    sendRequest(requestConfig, dataGrabber);\n    clearCurrentPassword();\n    clearNewPassword();\n    clearConfirmPassword();\n  };\n\n  /* ERROR HANDLING FOR FETCH REQUESTS */\n  useEffect(() => {\n    let errorTimer;\n    if (error) {\n      setHasError(true);\n      errorTimer = setTimeout(() => {\n        setHasError(false);\n      }, 2000);\n    }\n\n    return () => {\n      clearTimeout(errorTimer);\n    };\n  }, [error]);\n\n  return (\n    <React.Fragment>\n      {accountUpdated && (\n        <Alerts type=\"success\" msg=\"Your Password Has Been Updated!\" />\n      )}\n      {hasError && <Alerts type=\"error\" msg=\"Account update failed\" />}\n      <div className={classes.account}>\n        <h2 className={`ma-bt-md`}>Change Your Password</h2>\n        <form\n          onSubmit={updatePasswordHandler}\n          className={`${classes.form} ${classes[\"form-user-settings\"]}`}\n        >\n          <Input\n            label=\"Current Password\"\n            id=\"password-current\"\n            type=\"password\"\n            placeholder=\"••••••••\"\n            value={enteredCurrentPassword}\n            onBlur={currentPasswordBlurHandler}\n            onChange={currentPasswordInputHandler}\n          />\n\n          <Input\n            label=\"New Password\"\n            id=\"password-new\"\n            type=\"password\"\n            placeholder=\"••••••••\"\n            value={enteredNewPassword}\n            onBlur={newPasswordBlurHandler}\n            onChange={newPasswordInputHandler}\n          />\n\n          <Input\n            label={\"Confirm Password\"}\n            id=\"password-confirm\"\n            type=\"password\"\n            className=\"ma-bt-lg\"\n            placeholder=\"••••••••\"\n            value={enteredConfirmPassword}\n            onBlur={confirmPasswordBlurHandler}\n            onChange={confirmPasswordInputHandler}\n          />\n          {!enteredConfirmPasswordIsValid && (\n            <div className={classes.invalid}>Passwords Don't Match</div>\n          )}\n\n          <div className={`${classes[\"form__group\"]} right`}>\n            <button\n              className=\"custom-button\"\n              type=\"submit\"\n              disabled={!formIsValid}\n            >\n              Save Password\n            </button>\n          </div>\n        </form>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default ChangePasswordForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"orderlist\":\"OrderList_orderlist__DKbt6\",\"orderlist_deets\":\"OrderList_orderlist_deets__tYtRU\",\"orderlist_price\":\"OrderList_orderlist_price__aG+eL\",\"smallScreen\":\"OrderList_smallScreen__YODei\",\"bigScreen\":\"OrderList_bigScreen__A9gDf\"};","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport classes from \"./OrderList.module.css\";\nimport { images } from \"../../constants/images\";\n\nconst OrderList = (props) => {\n  const navigate = useNavigate();\n\n  const singleOrderHandler = () => {\n    navigate(`/order/${props.id}`, { replace: true });\n  };\n  return (\n    <li className={classes.orderlist}>\n      <figure>\n        {/* Image Source */}\n        <img src={images.blackCon} alt=\"Black Converse\" />\n      </figure>\n      <div className={classes[\"orderlist_deets\"]}>\n        {/* Title */}\n        <h2 className={classes.bigScreen}>{props.title}</h2>\n        <h2 className={classes.smallScreen}>\n          {props.title?.length > 11\n            ? `${props.title.slice(0, 11)}...`\n            : props.title}\n        </h2>\n        {/* createdAt */}\n        <span>ORDERED: {props.createdAt}</span>\n      </div>\n      <div className={classes.orderlist_price}>\n        {/* Order Amount */}\n        <span>£{props.amount}</span>\n        <button type=\"button\" onClick={singleOrderHandler}>\n          Details\n        </button>\n      </div>\n    </li>\n  );\n};\n\nexport default OrderList;\n","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__VHbzQ\",\"userProfile\":\"Profile_userProfile__eQS2K\",\"userProfile_deets\":\"Profile_userProfile_deets__P0Nxj\",\"orders\":\"Profile_orders__Tdgrz\",\"editProfile\":\"Profile_editProfile__MYjUr\",\"paginationContainer\":\"Profile_paginationContainer__LGCJZ\",\"activePage\":\"Profile_activePage__GZcEt\",\"nextPage\":\"Profile_nextPage__eC9M0\",\"prevPage\":\"Profile_prevPage__vZMvv\",\"react-icon\":\"Profile_react-icon__q3qsc\"};","import React, { useState } from \"react\";\nimport ReactPaginate from \"react-paginate\";\nimport { useSelector } from \"react-redux\";\nimport { AiOutlineRight, AiOutlineLeft } from \"react-icons/ai\";\nimport { images } from \"../../constants/images\";\nimport UpdateAccount from \"./EditProfile/UpdateAccount\";\nimport ChangePasswordForm from \"./EditProfile/ChangePasswordForm\";\nimport OrderList from \"./OrderList\";\n\nimport classes from \"./Profile.module.css\";\n\nconst Profile = (props) => {\n  const [editProfile, setEditProfile] = useState(false);\n  const [pageNo, setPageNo] = useState(0);\n  const user = useSelector((state) => state.auth.user);\n\n  const editProfileHandler = () => {\n    setEditProfile((prev) => !prev);\n  };\n\n  /* PAGINATION */\n  const orders = user.orders;\n  const ordersPerPage = 4;\n  const pagesVisited = pageNo * ordersPerPage;\n  const pageCount = Math.ceil(orders?.length / ordersPerPage); //Place orders array here\n\n  const displayOrders =\n    orders?.slice(pagesVisited, pagesVisited + ordersPerPage).map((orders) => {\n      const createdAtDate = orders?.createdAt;\n      const date = new Intl.DateTimeFormat(navigator.language, {\n        month: \"short\",\n        day: \"2-digit\",\n        year: \"numeric\",\n      }).format(new Date(createdAtDate));\n      const amount = orders.amount / 100;\n      return (\n        <OrderList\n          key={orders._id}\n          id={orders._id}\n          title={orders._id}\n          amount={amount}\n          createdAt={date}\n        />\n      );\n    }) ?? \"\";\n\n  const changePageHandler = ({ selected }) => {\n    setPageNo(selected);\n  };\n\n  const memberSince = new Date(user?.createdAt);\n  const date = new Intl.DateTimeFormat(navigator.language, {\n    month: \"short\",\n    day: \"2-digit\",\n    year: \"numeric\",\n  }).format(memberSince);\n\n  return (\n    <div className={classes.profile}>\n      {!editProfile && (\n        <React.Fragment>\n          <div className={classes.orders}>\n            <h1>Orders</h1>\n            <ul>{displayOrders}</ul>\n\n            {orders?.length > 0 && (\n              <ReactPaginate\n                previousLabel={\n                  <AiOutlineLeft\n                    fontSize={25}\n                    className={classes[\"react-icon\"]}\n                  />\n                }\n                nextLabel={\n                  <AiOutlineRight\n                    fontSize={25}\n                    className={classes[\"react-icon\"]}\n                  />\n                }\n                pageCount={pageCount}\n                onPageChange={changePageHandler}\n                containerClassName={classes.paginationContainer}\n                previousLinkClassName={classes.prevPage}\n                nextLinkClassName={classes.nextPage}\n                activeClassName={classes.activePage}\n              />\n            )}\n          </div>\n        </React.Fragment>\n      )}\n      {editProfile && (\n        <React.Fragment>\n          <div className={classes.editProfile}>\n            <h1>Edit Profile</h1>\n            <UpdateAccount />\n            <div className=\"line\"> &nbsp; </div>\n            <ChangePasswordForm />\n          </div>\n        </React.Fragment>\n      )}\n\n      <div className={classes.userProfile}>\n        <figure>\n          <img src={images.defaultImage} alt=\"default\" />\n        </figure>\n        <h2>{user?.name}</h2>\n        <ul className={classes[\"userProfile_deets\"]}>\n          <li>\n            <strong>Email:</strong>\n            <span>{user?.email}</span>\n          </li>\n          <li>\n            <strong>Verified:</strong>\n            <span>Yes</span>\n          </li>\n          <li>\n            <strong>Customer Since:</strong>\n            <span>{date}</span>\n          </li>\n        </ul>\n        <button\n          type=\"button\"\n          className={classes.editBtn}\n          onClick={editProfileHandler}\n        >\n          {editProfile ? \"Orders\" : \"Edit Profile\"}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport Profile from \"../Profile/Profile\";\n\nconst ProfilePage = () => {\n  return <Profile />;\n};\n\nexport default ProfilePage;\n"],"names":["navigate","useNavigate","useState","formIsValid","setFormIsValid","hasError","setHasError","accountUpdated","setAccountUpdated","token","useSelector","state","auth","useHttp","error","sendRequest","re","useInput","value","toLowerCase","trim","includes","enteredName","enteredNameIsValid","isValid","nameInputHandler","inputHandler","nameBlurHandler","blurHandler","clearName","clear","match","enteredEmail","enteredEmailIsValid","emailInputHandler","emailBlurHandler","clearEmail","useEffect","errorTimer","setTimeout","clearTimeout","Alerts","type","msg","className","classes","onSubmit","event","preventDefault","requestConfig","url","method","body","email","name","headers","Authorization","data","replace","Input","label","id","placeholder","onBlur","onChange","length","enteredCurrentPassword","enteredCurrentPasswordIsValid","currentPasswordInputHandler","currentPasswordBlurHandler","clearCurrentPassword","enteredNewPassword","enteredNewPasswordIsValid","newPasswordInputHandler","newPasswordBlurHandler","clearNewPassword","enteredConfirmPassword","enteredConfirmPasswordIsValid","confirmPasswordInputHandler","confirmPasswordBlurHandler","clearConfirmPassword","currentPassword","password","confirmPassword","disabled","props","src","images","alt","title","slice","createdAt","amount","onClick","editProfile","setEditProfile","pageNo","setPageNo","user","orders","pagesVisited","pageCount","Math","ceil","displayOrders","map","createdAtDate","date","Intl","DateTimeFormat","navigator","language","month","day","year","format","Date","_id","memberSince","previousLabel","fontSize","nextLabel","onPageChange","selected","containerClassName","previousLinkClassName","nextLinkClassName","activeClassName","prev"],"sourceRoot":""}